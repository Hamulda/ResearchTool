name: CI/CD Pipeline for Azure App Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: research-tool-app
  AZURE_RESOURCE_GROUP: research-tool-rg
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Lint with mypy
      run: |
        mypy --install-types --non-interactive || true
        mypy . --ignore-missing-imports || true
    
    - name: Run tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        COSMOS_DB_ENDPOINT: ${{ secrets.COSMOS_DB_ENDPOINT_TEST }}
        COSMOS_DB_KEY: ${{ secrets.COSMOS_DB_KEY_TEST }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_REGISTRY_SERVER }}
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t ${{ secrets.AZURE_REGISTRY_SERVER }}/research-tool:$IMAGE_TAG .
        docker build -t ${{ secrets.AZURE_REGISTRY_SERVER }}/research-tool:latest .
        docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/research-tool:$IMAGE_TAG
        docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/research-tool:latest
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ secrets.AZURE_REGISTRY_SERVER }}/research-tool:${{ github.sha }}
    
    - name: Configure App Service settings
      run: |
        az webapp config appsettings set \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --settings \
            GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            COSMOS_DB_ENDPOINT="${{ secrets.COSMOS_DB_ENDPOINT }}" \
            COSMOS_DB_KEY="${{ secrets.COSMOS_DB_KEY }}" \
            COSMOS_DB_NAME="${{ secrets.COSMOS_DB_NAME }}" \
            DAILY_COST_LIMIT="${{ secrets.DAILY_COST_LIMIT }}" \
            DEBUG="false" \
            LOG_LEVEL="INFO" \
            ENVIRONMENT="production"
    
    - name: Restart App Service
      run: |
        az webapp restart \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }}
    
    - name: Health Check
      run: |
        sleep 30
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1

  deployment-notification:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
