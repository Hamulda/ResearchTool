# Research Tool Configuration for Azure App Service
import os
from pathlib import Path
from typing import Optional, Dict, Any, List, Union
from dataclasses import dataclass, field
from enum import Enum

# Základní nastavení
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"

# Vytvořit složky pokud neexistují (jen pro lokální development)
if not os.getenv('WEBSITE_SITE_NAME'):  # Azure App Service check
    for dir_path in [DATA_DIR]:
        dir_path.mkdir(exist_ok=True)

class Environment(Enum):
    """Prostředí aplikace"""
    DEVELOPMENT = "development"
    TESTING = "testing"
    PRODUCTION = "production"

@dataclass
class ScrapingConfig:
    """Konfigurace pro scraping s rozšířenými možnostmi"""
    request_timeout: int = 30
    max_retries: int = 3
    retry_delay: float = 1.0
    concurrent_requests: int = 5
    user_agents: List[str] = field(default_factory=list)
    max_concurrent_sources: int = 10
    global_rate_limit: float = 0.1  # Minimální delay mezi requesty
    cache_ttl_seconds: int = 3600  # TTL pro cache

    def __post_init__(self):
        if not self.user_agents:
            self.user_agents = [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
                'Mozilla/5.0 (compatible; AcademicBot/1.0; +http://example.com/bot)'
            ]

@dataclass
class SourceConfig:
    """Rozšířená konfigurace pro jednotlivé zdroje"""
    name: str
    base_url: str
    api_key_env: Optional[str] = None
    rate_limit_delay: float = 1.0
    max_retries: int = 3
    timeout: int = 30
    custom_headers: Dict[str, str] = field(default_factory=dict)
    parser_config: Dict[str, Any] = field(default_factory=dict)
    requires_proxy: bool = False
    priority: int = 1  # 1 = highest priority
    enabled: bool = True

@dataclass
class DatabaseConfig:
    """Konfigurace databáze"""
    url: str = "sqlite:///./research_data.db"
    echo: bool = False
    pool_size: int = 5
    max_overflow: int = 10
    pool_timeout: int = 30

@dataclass
class CacheConfig:
    """Konfigurace cache systému"""
    enabled: bool = True
    backend: str = "memory"  # memory, redis, disk
    ttl_seconds: int = 3600
    max_size: int = 1000
    redis_url: Optional[str] = None

@dataclass
class AppConfig:
    """Konfigurace Flask aplikace"""
    debug: bool = False
    testing: bool = False
    secret_key: str = "dev-secret-key-change-in-production"
    host: str = "0.0.0.0"
    port: int = 5000
    cors_origins: List[str] = field(default_factory=lambda: ["http://localhost:3000", "http://localhost:8501"])

class BaseConfig:
    """Základní konfigurace s rozšířenými možnostmi"""
    ENVIRONMENT = Environment.DEVELOPMENT
    
    # Aplikační konfigurace
    APP = AppConfig()
    
    # Scraping konfigurace
    SCRAPING = ScrapingConfig()
    
    # Database konfigurace
    DATABASE = DatabaseConfig()
    
    # Cache konfigurace  
    CACHE = CacheConfig()

    # Definice zdrojů s rozšířenými možnostmi
    SOURCES = {
        'wikipedia': SourceConfig(
            name='Wikipedia',
            base_url='https://en.wikipedia.org',
            rate_limit_delay=0.5,
            timeout=20,
            priority=2,
            parser_config={
                'api_endpoint': '/w/api.php',
                'content_selector': '#mw-content-text',
                'title_selector': 'h1.firstHeading',
                'summary_selector': '.mw-parser-output > p:first-of-type',
                'search_params': {
                    'action': 'query',
                    'format': 'json',
                    'list': 'search',
                    'srprop': 'snippet|titlesnippet|size|timestamp'
                }
            }
        ),
        'openalex': SourceConfig(
            name='OpenAlex',
            base_url='https://api.openalex.org',
            rate_limit_delay=0.1,
            timeout=25,
            priority=1,
            custom_headers={
                'User-Agent': 'Research-Tool (mailto:your-email@example.com)',
                'Accept': 'application/json'
            },
            parser_config={
                'works_endpoint': '/works',
                'authors_endpoint': '/authors',
                'institutions_endpoint': '/institutions',
                'default_params': {
                    'per-page': 10,
                    'sort': 'relevance_score:desc',
                    'select': 'id,title,abstract,publication_year,doi,open_access,authorships,cited_by_count'
                }
            }
        ),
        'semantic_scholar': SourceConfig(
            name='Semantic Scholar',
            base_url='https://api.semanticscholar.org',
            api_key_env='SEMANTIC_SCHOLAR_API_KEY',
            rate_limit_delay=1.0,
            timeout=30,
            priority=1,
            parser_config={
                'paper_endpoint': '/graph/v1/paper',
                'author_endpoint': '/graph/v1/author',
                'search_endpoint': '/graph/v1/paper/search',
                'default_fields': 'paperId,title,abstract,year,authors,citationCount,openAccessPdf,url'
            }
        ),
        'google_scholar': SourceConfig(
            name='Google Scholar',
            base_url='https://scholar.google.com',
            rate_limit_delay=2.0,
            timeout=20,
            priority=3,
            requires_proxy=True,  # Může vyžadovat proxy
            enabled=False,  # Disabled by default kvůli rate limiting
            custom_headers={
                'User-Agent': 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'
            },
            parser_config={
                'search_url': '/scholar',
                'search_selector': '.gs_rt a',
                'citation_selector': '.gs_fl a',
                'snippet_selector': '.gs_rs',
                'next_page_selector': '.gs_ico_nav_next'
            }
        ),
        'arxiv': SourceConfig(
            name='arXiv',
            base_url='http://export.arxiv.org',
            rate_limit_delay=3.0,  # arXiv má strict rate limiting
            timeout=30,
            priority=2,
            parser_config={
                'api_endpoint': '/api/query',
                'default_params': {
                    'search_query': 'all:{}',
                    'start': 0,
                    'max_results': 10,
                    'sortBy': 'relevance',
                    'sortOrder': 'descending'
                }
            }
        )
    }

    @classmethod
    def get_source_config(cls, source_name: str) -> Optional[SourceConfig]:
        """Získá konfiguraci pro daný zdroj"""
        return cls.SOURCES.get(source_name)
    
    @classmethod
    def get_enabled_sources(cls) -> Dict[str, SourceConfig]:
        """Vrátí pouze povolené zdroje"""
        return {name: config for name, config in cls.SOURCES.items() if config.enabled}
    
    @classmethod
    def get_sources_by_priority(cls) -> List[tuple[str, SourceConfig]]:
        """Vrátí zdroje seřazené podle priority"""
        enabled_sources = cls.get_enabled_sources()
        return sorted(enabled_sources.items(), key=lambda x: x[1].priority)

class DevelopmentConfig(BaseConfig):
    """Vývojová konfigurace"""
    ENVIRONMENT = Environment.DEVELOPMENT
    
    def __init__(self):
        super().__init__()
        self.APP.debug = True
        self.DATABASE.echo = True
        self.CACHE.enabled = True
        self.SCRAPING.concurrent_requests = 3

class TestingConfig(BaseConfig):
    """Testovací konfigurace"""
    ENVIRONMENT = Environment.TESTING
    
    def __init__(self):
        super().__init__()
        self.APP.testing = True
        self.APP.debug = True
        self.DATABASE.url = "sqlite:///:memory:"
        self.CACHE.enabled = False
        self.SCRAPING.request_timeout = 10
        self.SCRAPING.max_retries = 1

class ProductionConfig(BaseConfig):
    """Produkční konfigurace"""
    ENVIRONMENT = Environment.PRODUCTION
    
    def __init__(self):
        super().__init__()
        self.APP.debug = False
        self.APP.secret_key = os.getenv('SECRET_KEY', 'change-me-in-production')
        
        # Database z ENV variables
        self.DATABASE.url = os.getenv('DATABASE_URL', 'sqlite:///./research_data.db')
        
        # Cache konfigurace
        redis_url = os.getenv('REDIS_URL')
        if redis_url:
            self.CACHE.backend = "redis"
            self.CACHE.redis_url = redis_url
        
        # Scraping optimizations for production
        self.SCRAPING.concurrent_requests = 8
        self.SCRAPING.max_concurrent_sources = 15

# Config factory
CONFIG_MAP = {
    Environment.DEVELOPMENT: DevelopmentConfig,
    Environment.TESTING: TestingConfig,
    Environment.PRODUCTION: ProductionConfig
}

def get_config(env: Union[str, Environment] = None) -> BaseConfig:
    """
    Factory pro získání konfigurace podle prostředí
    """
    if env is None:
        env_str = os.getenv('FLASK_ENV', 'development').lower()
        if env_str in ['dev', 'development']:
            env = Environment.DEVELOPMENT
        elif env_str in ['test', 'testing']:
            env = Environment.TESTING
        elif env_str in ['prod', 'production']:
            env = Environment.PRODUCTION
        else:
            env = Environment.DEVELOPMENT
    elif isinstance(env, str):
        env = Environment(env.lower())
    
    config_class = CONFIG_MAP.get(env, DevelopmentConfig)
    return config_class()

# Validace konfigurace
def validate_config(config: BaseConfig) -> List[str]:
    """Validuje konfiguraci a vrací seznam chyb"""
    errors = []
    
    # Validace zdrojů
    for source_name, source_config in config.SOURCES.items():
        if not source_config.base_url:
            errors.append(f"Source {source_name}: missing base_url")
        
        if source_config.rate_limit_delay < 0:
            errors.append(f"Source {source_name}: rate_limit_delay must be >= 0")
            
        if source_config.api_key_env and not os.getenv(source_config.api_key_env):
            errors.append(f"Source {source_name}: API key {source_config.api_key_env} not found in environment")
    
    # Validace app konfigurace
    if config.APP.port < 1 or config.APP.port > 65535:
        errors.append("APP.port must be between 1 and 65535")
    
    return errors

# Export hlavních objektů
__all__ = [
    'BaseConfig', 'DevelopmentConfig', 'TestingConfig', 'ProductionConfig',
    'ScrapingConfig', 'SourceConfig', 'DatabaseConfig', 'CacheConfig', 'AppConfig',
    'Environment', 'get_config', 'validate_config'
]
